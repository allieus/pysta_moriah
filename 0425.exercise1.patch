From 6f0b09e95c9fe7577565d4e58bc2421fc5c44ec7 Mon Sep 17 00:00:00 2001
From: Binseop Ko <bsko@userstorylab.com>
Date: Tue, 21 Apr 2015 11:49:52 +0900
Subject: [PATCH] exercise 1

---
 pysta/manage.py                      | 10 ++++
 pysta/member/__init__.py             |  0
 pysta/member/admin.py                |  3 ++
 pysta/member/models.py               |  8 ++++
 pysta/member/tests.py                |  3 ++
 pysta/member/views.py                | 30 ++++++++++++
 pysta/pysta/__init__.py              |  0
 pysta/pysta/settings.py              | 89 ++++++++++++++++++++++++++++++++++++
 pysta/pysta/urls.py                  | 12 +++++
 pysta/pysta/wsgi.py                  | 14 ++++++
 pysta/templates/member/register.html | 20 ++++++++
 11 files changed, 189 insertions(+)
 create mode 100644 pysta/manage.py
 create mode 100644 pysta/member/__init__.py
 create mode 100644 pysta/member/admin.py
 create mode 100644 pysta/member/models.py
 create mode 100644 pysta/member/tests.py
 create mode 100644 pysta/member/views.py
 create mode 100644 pysta/pysta/__init__.py
 create mode 100644 pysta/pysta/settings.py
 create mode 100644 pysta/pysta/urls.py
 create mode 100644 pysta/pysta/wsgi.py
 create mode 100644 pysta/templates/member/register.html

diff --git a/pysta/manage.py b/pysta/manage.py
new file mode 100644
index 0000000..126e295
--- /dev/null
+++ b/pysta/manage.py
@@ -0,0 +1,10 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "pysta.settings")
+
+    from django.core.management import execute_from_command_line
+
+    execute_from_command_line(sys.argv)
diff --git a/pysta/member/__init__.py b/pysta/member/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/pysta/member/admin.py b/pysta/member/admin.py
new file mode 100644
index 0000000..8c38f3f
--- /dev/null
+++ b/pysta/member/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/pysta/member/models.py b/pysta/member/models.py
new file mode 100644
index 0000000..7b18cec
--- /dev/null
+++ b/pysta/member/models.py
@@ -0,0 +1,8 @@
+# -*- coding: utf-8 -*-
+from django.db import models
+from django.conf import settings
+
+# Create your models here.
+class Profile(models.Model):
+	user = models.OneToOneField(settings.AUTH_USER_MODEL)
+	
\ No newline at end of file
diff --git a/pysta/member/tests.py b/pysta/member/tests.py
new file mode 100644
index 0000000..7ce503c
--- /dev/null
+++ b/pysta/member/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/pysta/member/views.py b/pysta/member/views.py
new file mode 100644
index 0000000..7c819a2
--- /dev/null
+++ b/pysta/member/views.py
@@ -0,0 +1,30 @@
+# -*- coding: utf-8 -*-
+from django.shortcuts import render
+from django.template import Context, loader
+from django.http import HttpResponse
+from django.core.context_processors import csrf
+from django.contrib.auth import get_user_model
+from member.models import Profile
+
+# Create your views here.
+
+def register(request):
+	tpl = loader.get_template("member/register.html")
+	ctx = Context({
+	})
+	
+	if (request.POST.has_key('username')):
+		username = request.POST['username']
+		email = request.POST['email']
+		password = request.POST['password']
+		user = get_user_model().objects.create_user(username, email, password)
+		profile = Profile()
+		profile.user = user
+		profile.save()
+		user.save()
+		
+	
+	ctx.update(csrf(request))
+	
+	return HttpResponse(tpl.render(ctx))
+
diff --git a/pysta/pysta/__init__.py b/pysta/pysta/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/pysta/pysta/settings.py b/pysta/pysta/settings.py
new file mode 100644
index 0000000..6eb7d3b
--- /dev/null
+++ b/pysta/pysta/settings.py
@@ -0,0 +1,89 @@
+# -*- coding: utf-8 -*-
+"""
+Django settings for pysta project.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/1.7/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/1.7/ref/settings/
+"""
+
+# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
+import os
+BASE_DIR = os.path.dirname(os.path.dirname(__file__))
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/1.7/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'x*0dh@ybw*#%$swmqvs@xw^9v#a54n!n5e^6406%vdvx@0n9^v'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+TEMPLATE_DEBUG = True
+
+ALLOWED_HOSTS = []
+
+TEMPLATE_DIRS = (
+	BASE_DIR + "/templates",
+)
+
+
+# Application definition
+
+INSTALLED_APPS = (
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+	'member',
+)
+
+MIDDLEWARE_CLASSES = (
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+)
+
+ROOT_URLCONF = 'pysta.urls'
+
+WSGI_APPLICATION = 'pysta.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/1.7/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+# Internationalization
+# https://docs.djangoproject.com/en/1.7/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/1.7/howto/static-files/
+
+STATIC_URL = '/static/'
diff --git a/pysta/pysta/urls.py b/pysta/pysta/urls.py
new file mode 100644
index 0000000..859a662
--- /dev/null
+++ b/pysta/pysta/urls.py
@@ -0,0 +1,12 @@
+# -*- coding: utf-8 -*-
+from django.conf.urls import patterns, include, url
+from django.contrib import admin
+
+urlpatterns = patterns('',
+    # Examples:
+    # url(r'^$', 'pysta.views.home', name='home'),
+    # url(r'^blog/', include('blog.urls')),
+
+	url(r'^member/register', 'member.views.register'),
+    url(r'^admin/', include(admin.site.urls)),
+)
diff --git a/pysta/pysta/wsgi.py b/pysta/pysta/wsgi.py
new file mode 100644
index 0000000..8d68614
--- /dev/null
+++ b/pysta/pysta/wsgi.py
@@ -0,0 +1,14 @@
+"""
+WSGI config for pysta project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/1.7/howto/deployment/wsgi/
+"""
+
+import os
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "pysta.settings")
+
+from django.core.wsgi import get_wsgi_application
+application = get_wsgi_application()
diff --git a/pysta/templates/member/register.html b/pysta/templates/member/register.html
new file mode 100644
index 0000000..4364f83
--- /dev/null
+++ b/pysta/templates/member/register.html
@@ -0,0 +1,20 @@
+<html>
+<body>
+	<form action="/member/register" method="post">
+		{%csrf_token%}
+
+		username: 
+		<input type="text" name="username" /> <br />
+		
+		email:
+		<input type="text" name="email" /><br />
+		
+		password
+		<input type="password" name="password" /><br />
+		
+		password 확인
+		<input type="password" name="password2" /><br />
+		
+		<input type="submit" value="가입" />
+	</form>
+</body>
-- 
1.9.4.msysgit.1

